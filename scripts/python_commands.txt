from dynamic_graph.sot.torque_control.tests.test_balance_ctrl_openhrp import *
np.set_printoptions(precision=3, suppress=True)
robot.timeStep = 0.002;
ent = test_balance_ctrl_openhrp(robot, use_real_vel=True, use_real_base_state=True);
robot.ctrl_manager.setStreamPrintPeriod(0.5);

start_sot()
#wait 1s
robot.estimator_ft.setFTsensorOffsets((0.,)*24)


create_topic(robot.ros, robot.filters.estimator_kin.dx, 'dq_est');
create_topic(robot.ros, robot.dq.sout, 'dq');
create_topic(robot.ros, robot.inv_dyn.com_ref_pos,  'com_ref_pos');
create_topic(robot.ros, robot.inv_dyn.com_ref_vel,  'com_ref_vel');
create_topic(robot.ros, robot.inv_dyn.com,          'com');
create_topic(robot.ros, robot.inv_dyn.com_vel,      'com_vel');
create_topic(robot.ros, robot.inv_dyn.com_acc,      'com_acc');
create_topic(robot.ros, robot.inv_dyn.com_acc_des,  'com_acc_des');
create_topic(robot.ros, robot.base_estimator.q, 'q_est');
create_topic(robot.ros, robot.q.sout, 'q');
create_topic(robot.ros, robot.traj_gen.q, 'q_ref');
create_topic(robot.ros, robot.device.robotVelocity, 'v');
create_topic(robot.ros, robot.base_estimator.v, 'v_est');
create_topic(robot.ros, robot.inv_dyn.zmp_des, 'zmp_des');
create_topic(robot.ros, robot.inv_dyn.zmp, 'zmp');
create_topic(robot.ros, robot.inv_dyn.f_ref_right_foot, 'f_ref_right_foot');
create_topic(robot.ros, robot.inv_dyn.f_ref_left_foot, 'f_ref_left_foot');
create_topic(robot.ros, robot.inv_dyn.f_des_right_foot, 'f_des_right_foot');
create_topic(robot.ros, robot.inv_dyn.f_des_left_foot, 'f_des_left_foot');
create_topic(robot.ros, robot.inv_dyn.zmp_left_foot, 'zmp_left_foot');
create_topic(robot.ros, robot.inv_dyn.zmp_right_foot, 'zmp_right_foot');
create_topic(robot.ros, robot.device.forceLLEG,       'forceLLEG');
create_topic(robot.ros, robot.device.forceRLEG,       'forceRLEG');
create_topic(robot.ros, robot.estimator_ft.contactWrenchLeftSole,       'wrenchLeftSole');
create_topic(robot.ros, robot.device.gyrometer,       'gyro');
create_topic(robot.ros, robot.device.accelerometer,       'acc');

create_topic(robot.ros, robot.base_estimator.w_lf, 'w_lf', data_type='double');
create_topic(robot.ros, robot.base_estimator.w_rf, 'w_rf', data_type='double');
create_topic(robot.ros, robot.base_estimator.w_lf_filtered, 'w_lf_filtered', data_type='double');
create_topic(robot.ros, robot.base_estimator.w_rf_filtered, 'w_rf_filtered', data_type='double');
#create_topic(robot.ros, robot.torque_ctrl.dq_motor,       'dq_motor');
#create_topic(robot.ros, robot.torque_ctrl.jointsAccelerationsDesired,       'ddq_des');
create_topic(robot.ros, robot.rf_traj_gen.x, 'rf_ref_traj_gen');
create_topic(robot.ros, robot.lf_traj_gen.x, 'lf_ref_traj_gen');

#robot.torque_ctrl.velLeakingRate.value = 30*(0.,)
#robot.torque_ctrl.reset_ddq_integral();
ent.ctrl_manager.setCtrlMode('all','torque')
robot.base_estimator.set_imu_weight(1.0);

SOT_TORQUE_INSTALL_DIR = '/home/adelpret/devel/openrobots/src/sot-torque-control'

robot.com_traj_gen.setSpline(SOT_TORQUE_INSTALL_DIR+"/data/traj_com_y_0.08/com_spline.curve", -1)
robot.lf_force_traj_gen.setSpline(SOT_TORQUE_INSTALL_DIR+"/data/traj_com_y_0.08/lf_force.curve", -1)
robot.rf_force_traj_gen.setSpline(SOT_TORQUE_INSTALL_DIR+"/data/traj_com_y_0.08/rf_force.curve", -1)
robot.lf_traj_gen.setSpline(SOT_TORQUE_INSTALL_DIR+"/data/traj_com_y_0.08/lf_spline2.curve", -1, tuple(map(tuple, np.identity(3))))

robot.traj_sync.turnOn()

robot.com_traj_gen.setSpline(SOT_TORQUE_INSTALL_DIR+"/data/traj_com_y_0.08/com_spline.curve", 1)
robot.lf_force_traj_gen.setSpline(SOT_TORQUE_INSTALL_DIR+"/data/traj_com_y_0.08/lf_force.curve", 1)
robot.rf_force_traj_gen.setSpline(SOT_TORQUE_INSTALL_DIR+"/data/traj_com_y_0.08/rf_force.curve", 1)
robot.lf_traj_gen.setSpline(SOT_TORQUE_INSTALL_DIR+"/data/traj_com_y_0.08/lf_spline2.curve", 1, tuple(map(tuple, np.identity(3))))


sleep(5.0)
robot.com_traj_gen.move(1, 0.05, 1.5)
sleep(2.0*7)
robot.com_traj_gen.startSinusoid(1, -0.05, 1.5)
robot.com_traj_gen.startLinChirp(1, -0.05, 0.3, 0.7, 10)
robot.com_traj_gen.startConstAcc(1, -0.05, 2)

create_topic(robot.ros, robot.inv_dyn.tau_des,            'tau_des');
create_topic(robot.ros, robot.estimator_ft.jointsTorques, 'tau_est');

plug(robot.estimator_kin.dx,    robot.base_estimator.joint_velocities)
plug(robot.q.sout,              robot.inv_dyn.q);
plug(robot.v.sout,              robot.inv_dyn.v);

robot.traj_gen.moveJoint('lsp', -1.0, 2.0)
robot.traj_gen.startSinusoid('lsp', 1.0, 2.0)

ent.ctrl_manager.setCtrlMode('all','torque')
ent.ctrl_manager.setCtrlMode('rhp-rhy-rhr-rk-rar-rap-lhp-lhr-lhy-lk-lar-lap','torque')

from dynamic_graph.sot.torque_control.main import *
robot.timeStep = 0.001
ent = main_v3(robot, delay=0.1, startSoT=True, go_half_sitting=True)

dump_signal_to_file([robot.device.currents, estimator.jointsTorques, robot.device.control], 16, 'signals.txt', 100, 0.1)

j = 8
kp_pos[:] = 0
pos_ctrl.Kp.value = tuple(kp_pos)
q = list(robot.device.robotState.value)
pos_ctrl.base6d_encoders.value = tuple(q)
traj_gen.base6d_encoders.value = tuple(q)
traj_gen.startTriangle('lhp', q[6+j]+0.1, 5)
kp_pos[j] = 1
pos_ctrl.Kp.value = tuple(kp_pos)
q[6+j]+=0.05
pos_ctrl.base6d_encoders.value = tuple(q)


move_to_initial_configuration(traj_gen);
start_admittance_ctrl_RL(ctrl_manager);
traj_gen.moveForce('rf',2,50,5);
smoothly_set_signal_to_zero(inv_dyn.Kp);
traj_gen.startForceSinusoid('rf',2,100,3)
traj_gen.startForceSinusoid('rf',4,-10,3)
tracer = start_tracer(robot, estimator, torque_ctrl, traj_gen, ctrl_manager, inv_dyn, adm_ctrl);

ctrl_manager.max_delta_q.value=30*(0.1,)
traj_gen.playTrajectoryFile('/home/oramos/devel/ros-fuerte/src/sot/sot-torque-control/share/joint_traj/climbing32_1ms.pos')

ctrl_manager.setCtrlMode('rhp','torque')
tracer.start()
traj_gen.startLinChirp('rhp', -1.0, 0.3, 0.7, 40)
estimator.setUseFTsensors(True);
traj_gen.moveJoint('rhp',-1.5,3)


# FORCE CONTROL EXPERIMENT
k_s[:6] = array([  9.6875,  69.375 ,  12.5   ,  40.8125,  11.875 ,   8.6875])
traj_gen.startForceSinusoid('rf',2,300,1.2)
traj_gen.startForceSinusoid('rf',4,-10,3)

# IDENTIFICATION OF RIGHT LEG JOINTS
traj_gen.moveJoint('lhr', 0.5, 3.0);    # move left leg out of the way

traj_gen.moveJoint('rhp', 0.0, 5.0);
traj_gen.startSinusoid('rhp', -1.0, 2.0);

traj_gen.moveJoint('rhr', -0.5, 3.0);
traj_gen.startSinusoid('rhr', 0.1, 1.2) # WARNING: THIS GOES AGAINST THE LEFT LEG

traj_gen.moveJoint('rhy', -0.5, 3.0);
traj_gen.moveJoint('rhr', -0.5, 3.0);
traj_gen.startSinusoid('rhy', 0.5, 1.5)

traj_gen.moveJoint('rk',0.1,3.0)
traj_gen.startSinusoid('rk', 2.0, 3.0)

traj_gen.moveJoint('rap', 0.6, 3.0);
traj_gen.startSinusoid('rap', -1.2, 1.5)

traj_gen.moveJoint('rar', 0.55, 3.0);
traj_gen.startSinusoid('rar', -0.3, 1.0);


tracer.start();
tracer = reset_tracer(robot,tracer)
